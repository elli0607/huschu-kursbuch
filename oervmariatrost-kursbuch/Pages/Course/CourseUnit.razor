@page "/courses/{CourseId}/units/{UnitId}"
@attribute [Authorize]

@using oervmariatrost_kursbuch.Data;
@using oervmariatrost_kursbuch.Data.DTO;
@inject NavigationManager NavigationManager
@inject ICourseDataService CourseDataService;

<div class="container-fluid mt-5">
    <div class="row justify-content-center">
        <h1 class="justify-content-center">@CourseDetails.Name</h1>
    </div>

    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Ablauf der Einheit
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @((MarkupString)CourseDetails?.SummaryUnit)
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Lernziel der Einheit
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @((MarkupString)CourseDetails?.LearningGoal)
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Nützliche Trainings-Tipps
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @((MarkupString)CourseDetails?.ImportantExerciseTips)
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFour">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                    Alltags-Tipps
                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @((MarkupString)CourseDetails?.Lifehacks)
                </div>
            </div>
        </div>
    </div>

    <!--<div class="row m-4">
        <div class="col-12 unit-detail-header">
            Ablauf der Einheit
        </div>
        <div class="col-12">
            <p>
                @((MarkupString)CourseDetails?.SummaryUnit)
            </p>
        </div>
    </div>
    <div class="row m-4">
        <div class="col-12 unit-detail-header">
            Lernziel der Einheit
        </div>
        <div class="col-12">
            <p>
                @((MarkupString)CourseDetails?.LearningGoal)
            </p>
        </div>
    </div>
    <div class="row m-4">
        <div class="col-12 unit-detail-header">
            Nützliche Trainings-Tipps
        </div>
        <div class="col-12">
            <p>
                @((MarkupString)CourseDetails?.ImportantExerciseTips)
            </p>
        </div>
    </div>
    <div class="row m-4">
        <div class="col-12 unit-detail-header">
            Alltags-Tipps
        </div>
        <div class="col-12">
            <p>
                @((MarkupString)CourseDetails?.Lifehacks)
            </p>
        </div>
    </div>-->

    <div class="row justify-content-center  course-headline">
        <div class="col-12"><h2> Module </h2></div>
        <div class="col-12 justify-content-center">Folgende Module wurden besprochen:</div>
    </div>
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var module in CourseUnitModules)
        {
            <div class="col">
                <div class="card h-100 module-card">
                    <div class="card-body">
                        <div class="card-title">
                            <h5 class="card-title">@module.Name</h5>
                        </div>
                        <p class="card-text">@((MarkupString)module.Description)</p>
                    </div>
                    <div class="card-footer">
                        <a href="/courses/@CourseId/units/@UnitId/modules/@module.ModuleId" class="btn btn-outline-primary">Modul ansehen</a>
                    </div>
                </div>
            </div>
        }
    </div>

</div>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string CourseId { get; set; }
    [Parameter]
    public string UnitId { get; set; }

    private CourseUnitDetailDTO CourseDetails = new CourseUnitDetailDTO();
    private IList<CourseUnitModuleDTO> CourseUnitModules = new List<CourseUnitModuleDTO>();

    protected async override Task OnInitializedAsync()
    {
        var claims = (await authenticationStateTask).User.Claims.ToList();
        var authenticatedEmail = claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;
        CourseDetails = await CourseDataService.GetCourseUnit(Guid.Parse(UnitId), Guid.Parse(CourseId), authenticatedEmail);
        await InvokeAsync(() => StateHasChanged());
        CourseUnitModules = await CourseDataService.GetCourseUnitModules(Guid.Parse(UnitId), Guid.Parse(CourseId), authenticatedEmail);
        await InvokeAsync(() => StateHasChanged());
    }

}
