@page "/courses"
@attribute [Authorize]

@using oervmariatrost_kursbuch.Data;
@using oervmariatrost_kursbuch.Data.DTO;
@using oervmariatrost_kursbuch.Data.UserDataManagement;
@inject NavigationManager NavigationManager
@inject ICourseDataService CourseDataService;
@inject UserSessionDataService UserDataService;
@inherits LayoutComponentBase




<h1 class="margin-header">Meine Kurse</h1>

<div class="row row-cols-1 row-cols-md-2 card-container">
    @foreach (var course in Courses)
    {
        <div class="col pb-4">
            <div class="card h-100 course-card">
                <div class="card-title">
                    <h3>@course.Title</h3>
                </div>
                <img src="@course.Picture" class="card-img-top" alt="...">
                <div class="card-body">
                    <p class="card-text fw-bold">Hund: @course.DogName</p>
                    <p class="card-text">@course.OverviewDescription</p>
                    <div class="row org-details">
                        <div class="col-md-8">
                            <p class="card-text">Kursstart @course.CourseStartDate.ToString("dd.MM.yyyy HH:mm")</p>
                        </div>
                        <div class="col-md-4">
                            <p class="card-text right-align">@course.NumberOfUnits Einheiten</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a href="/courses/@course.CourseId" class="btn btn-outline-primary @(course.UseCourseBook && course.BoughtCourseBook ? "" : "disabled")">Zum Kursbuch</a>
                </div>
            </div>
        </div>
    }
</div>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IList<CourseOverviewDTO> Courses = new List<CourseOverviewDTO>();


    protected async override Task OnInitializedAsync()
    {
        var claims = (await authenticationStateTask).User.Claims.ToList();
        var authenticatedEmail = claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;
        var test = CourseDataService.InitializeUserData(authenticatedEmail);
        Courses = await CourseDataService.GetAvailableCourses(authenticatedEmail);
        foreach(var course in Courses)
        {
            course.Picture = course.Picture == null ? "kurs.jpg" : "data:image/jpeg;base64," + course.Picture;
        }
        await InvokeAsync(() => StateHasChanged());
    }

}
