@page "/courses/{CourseId}"
@attribute [Authorize]

@using oervmariatrost_kursbuch.Data;
@using oervmariatrost_kursbuch.Data.DTO;
@inject NavigationManager NavigationManager
@inject ICourseDataService CourseDataService;

<div class="justify-content-center align-content-center">
    <h1 class="margin-header">@Course?.Title</h1>
</div>

<div class="container-fluid">
    <div class="card m-3" style=" border:none">
        <div class="row g-0 mt-3">
            <div class="col-md-4 course-detail-image">
                <img src="data:image /jpeg;base64,@Course?.Picture" class="img-fluid rounded-start" alt="...">
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <p class="card-text">@((MarkupString)Course?.WelcomeText)</p>
                    <p class="card-text fw-bold"> Kursleiter: @Course?.Instructor</p>
                    <p class="card-text fw-bold">Trainerteam: @Course?.Trainers</p>
                    <p class="card-text small">
                        Kursstart: @Course?.CourseStartDate.ToString("dd.MM.yyyy") <br />
                        Kursende: @Course?.CourseEndDate.ToString("dd.MM.yyyy") <br />
                        Uhrzeit: @Course?.CourseStartDate.ToShortTimeString() - @Course.CourseStartDate.AddMinutes(60).ToShortTimeString()
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-between m-3 mb-5">
        <div class="col-auto">
            <h5> <i class="fa-solid fa-dog"></i> Anwesend: <small class="text-muted">@Course?.MyPresense / @Course?.TotalUnits</small></h5>
        </div>
        <div class="col-auto">
            <h5><i class="fa-solid fa-handshake"></i> Entschuldigt:  <small class="text-muted">@Course?.MyExcusedAbsence / @Course?.TotalUnits</small></h5>
        </div>
        <div class="col-auto">
            <h5><i class="fa-solid fa-gavel"></i> Abwesend: <small class="text-muted">@Course?.MyAbsence / @Course?.TotalUnits</small></h5>
        </div>
    </div>
    <hr/>
    @{
        int x = 0;
    }

    @foreach (var unit in Units)
    {
       
            x++;
        
        <div class="row m-3 justify-content-between course-unit-row">
            <div class="col-md-1">
                <h2><bold>@x</bold></h2>
            </div>
            <div class="col-md-8">
                <div class="row m-3 justify-content-between course-unit-row">
                    <div class="col-auto">
                        <h5><bold>@unit.ExecutionDate.ToString("dd.MM.yyyy")     @unit.Name</bold></h5>
                    </div>
                </div>
                <div class="row m-3">
                    <div class="row justify-content-between m-3">
                        <div class="col-auto">
                            <p><small class="text-muted">@((MarkupString)unit.Description)</small></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="row">
                    <div class="col-md-2">
                        @switch (unit.MyAttendenceState)
                        {
                            case 781410000:
                                <h5> <i class="fa-solid fa-dog"></i></h5>
                                break;
                            case 781410001:
                                <h5> <i class="fa-solid fa-handshake"></i></h5>
                                break;
                            case 781410002:
                                <h5> <i class="fa-solid fa-gavel"></i></h5>
                                break;
                            default:
                                <h5> <i class="fa-solid fa-gavel"></i></h5>
                                break;
                        }
                    </div>
                    <div class="col-md-10">
                        <a href="/courses/@CourseId/units/@unit.UnitId" class="btn btn-outline-primary @(unit.MyAttendenceState == 781410002 ? "disabled" : "")">Ganze Einheit anzeigen</a>
                    </div>
                </div>
            </div>
            
        </div>
        
       
        <hr/>
    }

</div>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string CourseId { get; set; }

    private CourseDetailDTO Course = new CourseDetailDTO();
    private IList<CourseUnitOverviewDTO> Units = new List<CourseUnitOverviewDTO>();


    protected async override Task OnInitializedAsync()
    {
        var claims = (await authenticationStateTask).User.Claims.ToList();
        var authenticatedEmail = claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;
        try 
        {
            Course = await CourseDataService.GetCourseDetails(Guid.Parse(CourseId), authenticatedEmail);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/");
        }

        await InvokeAsync(() => StateHasChanged());
        Units = await CourseDataService.GetCourseUnits(Guid.Parse(CourseId), authenticatedEmail);
        Course.MyPresense = Units.Where(u => u.MyAttendenceState == 781410000).Count();
        Course.MyAbsence = Units.Where(u => u.MyAttendenceState == 781410002).Count();
        Course.MyExcusedAbsence = Units.Where(u => u.MyAttendenceState == 781410001).Count();
        await InvokeAsync(() => StateHasChanged());

    }

}
